// Generated by CoffeeScript 1.10.0
(function() {
  var APPLICATION_ID, Config, FIELD_TYPE, Logger, Record, V9Parser;

  Logger = require('./logger').Logger;

  Config = require('./config').Config;

  Record = require('./record').Record;

  FIELD_TYPE = require('./field_type');

  APPLICATION_ID = require('./application_id');

  V9Parser = (function() {
    function V9Parser(dao) {
      this._templates = {};
      this.config = Config.get();
      this.logger = Logger.get(this.config.logger.level);
      this.dao = dao;
    }

    V9Parser.prototype.parse = function(sender, nf_data) {
      var flowset, flowset_id, flowsets, j, len, raw_template, results, template, templates;
      flowsets = this.parse_flowset(nf_data);
      results = [];
      for (j = 0, len = flowsets.length; j < len; j++) {
        flowset = flowsets[j];
        flowset_id = flowset.readUInt16BE(0);
        if (flowset_id === 0) {
          this.logger.verbose("template flowset was recieved!");
          templates = this.parse_template_flowset(flowset);
          results.push((function() {
            var base, k, len1, name, results1;
            results1 = [];
            for (k = 0, len1 = templates.length; k < len1; k++) {
              raw_template = templates[k];
              template = this.parse_template(sender, raw_template);
              if ((base = this._templates)[name = template.sender] == null) {
                base[name] = {};
              }
              results1.push(this._templates[template.sender][template.id] = template);
            }
            return results1;
          }).call(this));
        } else if (flowset_id === 1) {
          results.push(this.logger.verbose("option template flowset was recieved!"));
        } else if (flowset_id >= 256) {
          this.logger.verbose("data flowset recieved!");
          results.push(this.parse_data_flowset(sender, flowset));
        } else {
          results.push(this.logger.verbose("reserved flowset id " + flowset_id + " was recieved!"));
        }
      }
      return results;
    };

    V9Parser.prototype.parse_flowset = function(nf_data) {
      var current, flowset_id, flowset_len, flowsets, nf_data_len;
      flowsets = [];
      nf_data_len = nf_data.length;
      current = 20;
      while (current < nf_data_len) {
        flowset_id = nf_data.readUInt16BE(current);
        flowset_len = nf_data.readUInt16BE(current + 2);
        flowsets.push(nf_data.slice(current, current + flowset_len));
        current += flowset_len;
      }
      return flowsets;
    };

    V9Parser.prototype.parse_template_flowset = function(flowset) {
      var current, field_num, flowset_len, template_id, templates;
      templates = [];
      flowset_len = flowset.readUInt16BE(2);
      current = 4;
      while (current < flowset_len) {
        template_id = flowset.readUInt16BE(current);
        field_num = flowset.readUInt16BE(current + 2);
        templates.push(flowset.slice(current, current + 4 + field_num * 4));
        current = current + 4 + field_num * 4;
      }
      return templates;
    };

    V9Parser.prototype.parse_template = function(sender, raw_template) {
      var current, field_num, i, j, length, ref, template, template_id, type;
      template_id = raw_template.readUInt16BE(0);
      field_num = raw_template.readUInt16BE(2);
      template = {
        sender: sender,
        id: template_id,
        flowset_id: 0,
        field_num: field_num,
        total_length: 0,
        fields: []
      };
      current = 4;
      for (i = j = 1, ref = field_num; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        type = raw_template.readUInt16BE(current);
        current += 2;
        length = raw_template.readUInt16BE(current);
        current += 2;
        template.total_length += length;
        template.fields.push({
          type: type,
          length: length
        });
      }
      return template;
    };

    V9Parser.prototype.parse_data_flowset = function(sender, flowset) {
      var template, template_id;
      template_id = flowset.readUInt16BE(0);
      if (this._templates[sender] && (this._templates[sender][template_id] != null)) {
        template = this._templates[sender][template_id];
        this.logger.debug("Template:", template);
        switch (template.flowset_id) {
          case 0:
            return this.parse_data_flowset_internal(sender, flowset, template);
          case 1:
            return this.logger.info("option data flowset has not been supported yet!");
        }
      } else {
        return this.logger.warn("template does not exist");
      }
    };

    V9Parser.prototype.parse_data_flowset_internal = function(sender, flowset, template) {
      var current, engine_id, epoch, field, flowset_len, ip, j, len, padding, record, records, ref, selector_id, template_id, value, value1, value2;
      records = [];
      template_id = flowset.readUInt16BE(0);
      flowset_len = flowset.readUInt16BE(2);
      padding = (flowset_len - 4) % template.total_length;
      current = 4;
      this.logger.debug("padding: " + padding);
      while (current < flowset_len - padding) {
        record = new Record();
        record.exporter = sender;
        record.template_id = template_id;
        ref = template.fields;
        for (j = 0, len = ref.length; j < len; j++) {
          field = ref[j];
          switch (field.length) {
            case 1:
              value = flowset.readUInt8(current);
              record.record[FIELD_TYPE[field.type]] = value;
              current += 1;
              break;
            case 2:
              value = flowset.readUInt16BE(current);
              record.record[FIELD_TYPE[field.type]] = value;
              current += 2;
              break;
            case 3:
              value1 = flowset.readUInt16BE(current);
              value2 = flowset.readUInt8(current + 2);
              value = (value1 << 8) + value2;
              record.record[FIELD_TYPE[field.type]] = value;
              current += 3;
              break;
            case 4:
              if (field.type === 8 || field.type === 12) {
                value = this.readByteArray(flowset, field.length, current);
                ip = value[0] + "." + value[1] + "." + value[2] + "." + value[3];
                record.record[FIELD_TYPE[field.type]] = ip;
              } else if (field.type === 95) {
                engine_id = flowset.readUInt8(current);
                value1 = flowset.readUInt16BE(current + 1);
                value2 = flowset.readUInt8(current + 3);
                selector_id = (value1 << 8) + value2;
                value = engine_id + ":" + selector_id;
                record.record[FIELD_TYPE[field.type]] = value;
                if (APPLICATION_ID[value] != null) {
                  record.record["applicatoin_name"] = APPLICATION_ID[value];
                }
              } else {
                value = flowset.readUInt32BE(current);
                record.record[FIELD_TYPE[field.type]] = value;
              }
              current += 4;
              break;
            default:
              value = this.readByteArray(flowset, field.length, current);
              if (field.type === 152 || field.type === 153) {
                epoch = value[2] * 1099511627776 + value[3] * 4294967296 + value[4] * 16777216 + value[5] * 65536 + value[6] * 256 + value[7];
                record.record[FIELD_TYPE[field.type]] = new Date(epoch);
              } else {
                record.record[FIELD_TYPE[field.type]] = value;
              }
              current += field.length;
          }
        }
        records.push(record);
      }
      this.logger.debug("Records:", records);
      return this.dao.insert(records);
    };

    V9Parser.prototype.readByteArray = function(flowset, length, current) {
      var byte_array, i, j, ref;
      byte_array = [];
      for (i = j = 0, ref = length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        byte_array.push(flowset.readUInt8(current + i));
      }
      return byte_array;
    };

    return V9Parser;

  })();

  module.exports = {
    V9Parser: V9Parser
  };

}).call(this);
