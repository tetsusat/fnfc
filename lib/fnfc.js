// Generated by CoffeeScript 1.10.0
(function() {
  var Config, DbClient, Fnfc, Logger, RecordDao, TemplateDao, V9Parser, dgram, fnfc;

  dgram = require('dgram');

  Config = require('./config').Config;

  Logger = require('./logger').Logger;

  V9Parser = require('./v9_parser').V9Parser;

  DbClient = require('./db_client').DbClient;

  RecordDao = require('./record_dao').RecordDao;

  TemplateDao = require('./template_dao').TemplateDao;

  Fnfc = (function() {
    function Fnfc() {
      this.config = Config.get();
      this.port = this.config.fnfc.port;
      this.server = dgram.createSocket('udp4');
      this.logger = Logger.get(this.config.logger.level);
      new DbClient((function(_this) {
        return function(err, db) {
          var dao;
          if (err) {
            throw err;
          }
          dao = new RecordDao(db);
          return _this.v9_parser = new V9Parser(dao);
        };
      })(this));
    }

    Fnfc.prototype.run = function() {
      this.server.on('message', (function(_this) {
        return function(msg, rinfo) {
          var nf_data, port, sender, version;
          sender = rinfo.address;
          port = rinfo.port;
          _this.logger.verbose("server got message from " + sender + ":" + port);
          nf_data = new Buffer(msg);
          version = nf_data.readUInt16BE(0);
          switch (version) {
            case 10:
              return _this.logger.warn("IPFIX has not been supported yet");
            case 9:
              return _this.v9_parser.parse(sender, nf_data);
            case 5:
              return _this.logger.warn("Netflow V5 has not been supported yet");
            default:
              return _this.logger.warn("unsuppoted Netflow version " + version);
          }
        };
      })(this));
      this.server.on('listening', (function(_this) {
        return function() {
          var address;
          address = _this.server.address();
          return _this.logger.info("server listening " + address.address + ":" + address.port);
        };
      })(this));
      return this.server.bind(this.port);
    };

    return Fnfc;

  })();

  fnfc = new Fnfc();

  fnfc.run();

}).call(this);
